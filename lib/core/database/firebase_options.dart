// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions currentPlatform(DotEnv env) {
    if (kIsWeb) {
      return web(env);
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android(env);
      case TargetPlatform.iOS:
        return ios(env);
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions web(DotEnv env) => FirebaseOptions(
        apiKey: env.env['FIREBASE_WEB_API_KEY'] ?? 'AIzaSyDCHhUyy3xsOSmsdBl5qgU02PhM5CqKJb4',
        appId:
            '1:${env.env['FIREBASE_MESSAGE_SENDER_ID'] ?? '126872780502'}:web:${env.env['FIREBASE_WEB_APP_ID'] ?? '18cf9694ab76333f5fd377'}',
        messagingSenderId: env.env['FIREBASE_MESSAGE_SENDER_ID'] ?? '126872780502',
        projectId: env.env['FIREBASE_PROJECT_ID'] ?? 'medired-f442d',
        authDomain: '${env.env['FIREBASE_PROJECT_ID'] ?? 'medired-f442d'}.firebaseapp.com',
        storageBucket: '${env.env['FIREBASE_PROJECT_ID'] ?? 'medired-f442d'}.appspot.com',
        measurementId: env.env['MEASUREMENT_ID'] ?? 'G-LKFZXDCEYK',
      );

  static FirebaseOptions android(DotEnv env) => FirebaseOptions(
        apiKey: env.env['FIREBASE_ANDROID_API_KEY'] ?? 'AIzaSyDBcoquWlqgAiIEZ5SCgd1msSVCNIXe8GQ',
        appId:
            '1:${env.env['FIREBASE_MESSAGE_SENDER_ID']!}:android:${env.env['FIREBASE_ANDROID_APP_ID']!}',
        messagingSenderId: env.env['FIREBASE_MESSAGE_SENDER_ID']!,
        projectId: env.env['FIREBASE_PROJECT_ID']!,
        storageBucket: '${env.env['FIREBASE_PROJECT_ID']!}.appspot.com',
      );

  static FirebaseOptions ios(DotEnv env) => FirebaseOptions(
        apiKey: env.env['FIREBASE_IOS_API_KEY']!,
        appId:
            '1:${env.env['FIREBASE_MESSAGE_SENDER_ID']!}:ios:${env.env['FIREBASE_IOS_APP_ID']!}',
        messagingSenderId: env.env['FIREBASE_MESSAGE_SENDER_ID']!,
        projectId: env.env['FIREBASE_PROJECT_ID']!,
        storageBucket: '${env.env['FIREBASE_PROJECT_ID']!}.appspot.com',
        iosBundleId: env.env['FIREBASE_IOS_BUNDLE_ID']!,
      );
}
